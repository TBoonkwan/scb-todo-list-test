// Mocks generated by Mockito 5.4.4 from annotations
// in scb_test/test/usecase/todo_list_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:scb_test/features/todo/data/model/task.dart' as _i7;
import 'package:scb_test/features/todo/data/model/todo_list_request.dart'
    as _i6;
import 'package:scb_test/features/todo/data/model/todo_list_response.dart'
    as _i2;
import 'package:scb_test/features/todo/domain/entity/todo_list_ui_model.dart'
    as _i3;
import 'package:scb_test/features/todo/domain/mapper/todo_list_mapper.dart'
    as _i8;
import 'package:scb_test/features/todo/domain/repository/todo_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoListResponse_0 extends _i1.SmartFake
    implements _i2.TodoListResponse {
  _FakeTodoListResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoListModel_1 extends _i1.SmartFake implements _i3.TodoListModel {
  _FakeTodoListModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ITodoListRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITodoListRepository extends _i1.Mock
    implements _i4.ITodoListRepository {
  MockITodoListRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.TodoListResponse> getTodoList(
          {required _i6.TodoListRequest? request}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodoList,
          [],
          {#request: request},
        ),
        returnValue:
            _i5.Future<_i2.TodoListResponse>.value(_FakeTodoListResponse_0(
          this,
          Invocation.method(
            #getTodoList,
            [],
            {#request: request},
          ),
        )),
      ) as _i5.Future<_i2.TodoListResponse>);

  @override
  _i5.Future<bool> deleteTodoList({required List<_i7.Task>? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodoList,
          [],
          {#task: task},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [TodoListMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoListMapper extends _i1.Mock implements _i8.TodoListMapper {
  MockTodoListMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TodoListModel map({required _i2.TodoListResponse? response}) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [],
          {#response: response},
        ),
        returnValue: _FakeTodoListModel_1(
          this,
          Invocation.method(
            #map,
            [],
            {#response: response},
          ),
        ),
      ) as _i3.TodoListModel);

  @override
  void setupNewCreatedDate(_i2.TodoListResponse? response) =>
      super.noSuchMethod(
        Invocation.method(
          #setupNewCreatedDate,
          [response],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.TodoListUIModel> addTaskToUIModel({
    required Map<String?, List<_i7.Task>>? taskListGroupByDate,
    required DateTime? today,
    required DateTime? tomorrow,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTaskToUIModel,
          [],
          {
            #taskListGroupByDate: taskListGroupByDate,
            #today: today,
            #tomorrow: tomorrow,
          },
        ),
        returnValue: <_i3.TodoListUIModel>[],
      ) as List<_i3.TodoListUIModel>);

  @override
  String getTitleByDate({
    required DateTime? today,
    required DateTime? tomorrow,
    required DateTime? createToday,
    required DateTime? convertStringToDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTitleByDate,
          [],
          {
            #today: today,
            #tomorrow: tomorrow,
            #createToday: createToday,
            #convertStringToDate: convertStringToDate,
          },
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #getTitleByDate,
            [],
            {
              #today: today,
              #tomorrow: tomorrow,
              #createToday: createToday,
              #convertStringToDate: convertStringToDate,
            },
          ),
        ),
      ) as String);
}
